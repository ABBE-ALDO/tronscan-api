net {
  type = mainnet
}

# https://www.playframework.com/documentation/latest/Configuration

# Default Database Configuration
slick.dbs.default {
  host = "127.0.0.1"
  dbname = "tron-explorer"
  username = "postgres"
  password = "postgres"
  db.url = "jdbc:postgresql://"${slick.dbs.default.host}":5433/"${slick.dbs.default.dbname}"?user="${slick.dbs.default.username}"&password="${slick.dbs.default.password}
  db.driver = "org.postgresql.Driver"
  driver = "slick.driver.PostgresDriver$"
}

db.default {
  host = "127.0.0.1"
  dbname = "tron-explorer"
  username = "postgres"
  password = "postgres"
  url = "jdbc:postgresql://"${db.default.host}":5433/"${db.default.dbname}"?user="${db.default.username}"&password="${db.default.password}
  driver = "org.postgresql.Driver"
}


testnet {
  # Distribution Account Private Key
  trx-distribution = {
    pk = ""
    amount = 0

    captcha = {
      enabled = false
      sitekey = ""
    }
  }
}

play.filters.enabled = [
  "play.filters.cors.CORSFilter",
  "play.filters.headers.SecurityHeadersFilter",
]

play.filters.headers = {

  # The X-Frame-Options header. If null, the header is not set.
  frameOptions = "DENY"

  # The X-XSS-Protection header. If null, the header is not set.
  xssProtection = "1; mode=block"

  # The X-Content-Type-Options header. If null, the header is not set.
  contentTypeOptions = "nosniff"

  # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
  permittedCrossDomainPolicies = "master-only"

  # The Content-Security-Policy header. If null, the header is not set.
  contentSecurityPolicy = null

  # The Referrer-Policy header. If null, the header is not set.
  referrerPolicy = "origin-when-cross-origin, strict-origin-when-cross-origin"

  # If true, allow an action to use .withHeaders to replace one or more of the above headers
  allowActionSpecificHeaders = true
}

play.filters.cors {
  pathPrefixes = ["/"]
  allowedOrigins = null
  allowedHttpMethods = null
  allowedHttpHeaders = null
  serveForbiddenOrigins = true
}

play.modules.enabled += "play.modules.swagger.SwaggerModule"
play.modules.enabled += "play.api.cache.redis.RedisCacheModule"

play.cache.redis {
  # bind the instance to unqualified APIs
  bind-default: false
  # unqualified APIs bind to "local" instance
  default-cache: "redis"

  instances {

    redis: {
      host: localhost
      port: 6379
      database: 2
    }
  }
}

api.version = "beta"

swagger.api.info = {
  contact = "rovak"
  description = "Tronscan API"
  title = "Tronscan"
  license = ""
  licenseUrl = ""
}

fullnode {
  ip    = "39.104.116.191",
  port  = 50051

  list = [
    "39.104.116.191:50051",
  ]
}

solidity {
  ip    = "47.89.244.227"
  port  = 50051

  list = [
    "47.89.244.227:50051"
  ]
}



sync {
  full = true
  solidity = true
}

nodeWatchdog = true

akka {
  actor {
    default-dispatcher {
      # This will be used if you have set "executor = "fork-join-executor""
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 8

        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        parallelism-factor = 3.0

        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 64

        # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
        # like peeking mode which "pop".
        task-peeking-mode = "LIFO"
      }
    }
  }
}

contexts {

  node-watcher {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      fixed-pool-size = 10
    }
  }

  expensive-cpu-operations {
    fork-join-executor {
      parallelism-max = 2
    }
  }
}
